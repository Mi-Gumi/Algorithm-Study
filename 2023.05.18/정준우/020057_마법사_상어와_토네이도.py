from sys import stdin


def 모래_갱신(움직일_칸_수, 세로이동_방향, 가로이동_방향, 바람_방향):
    global 답, 시작지점_행, 시작지점_열


    for _ in range(움직일_칸_수):
        시작지점_행 += 세로이동_방향
        시작지점_열 += 가로이동_방향
        if 시작지점_열 < 0:
            break


        퍼져나간_모래 = 0

        for 세로이동_방향, 가로이동_방향, 비율 in 바람_방향:
            새_위치의_행 = 시작지점_행 + 세로이동_방향
            새_위치의_열 = 시작지점_열 + 가로이동_방향

            # a 칸
            if 비율 == 0:
                퍼진_모래의_양 = 모래[시작지점_행][시작지점_열] - 퍼져나간_모래

            elif 비율 != 0:
                퍼진_모래의_양 = int(모래[시작지점_행][시작지점_열] * 비율)
                퍼져나간_모래 += 퍼진_모래의_양

            if 0 <= 새_위치의_행 < 격자_크기 and 0 <= 새_위치의_열 < 격자_크기:
                모래[새_위치의_행][새_위치의_열] += 퍼진_모래의_양
            elif not(0 <= 새_위치의_행 < 격자_크기 and 0 <= 새_위치의_열 < 격자_크기):
                답 += 퍼진_모래의_양


격자_크기 = int(stdin.readline())
모래 = [list(map(int, stdin.readline().split())) for _ in range(격자_크기)]

# 모래가 전부 퍼져나가고 a에 남을 양을 확인하기 위해 a 칸을 탐색하는 요소를 제일 뒤에 배치
# 서풍일 때의 비율을 알맞은 방향으로 회전시키면 남은 바람 방향 모두 만들 수 있음
서풍 = [(1, 1, 0.01), (-1, 1, 0.01), (1, 0, 0.07), (-1, 0, 0.07), (2, 0, 0.02), (-2, 0, 0.02), (1, -1, 0.1), (-1, -1, 0.1), (0, -2, 0.05), (0, -1, 0)]
동풍 = [(세로, -가로, 비율) for 세로, 가로, 비율 in 서풍]
남풍 = [(-가로, 세로, 비율) for 세로, 가로, 비율 in 서풍]
북풍 = [(가로, 세로, 비율) for 세로, 가로, 비율 in 서풍]

시작지점_행, 시작지점_열 = 격자_크기 // 2, 격자_크기 // 2
답 = 0

# 움직일 칸 수에 따라 고려해야 할 바람 방향은 각 2개
for 움직일_칸_수 in range(1, 격자_크기 + 1):

    if 움직일_칸_수 % 2 == 1:
        모래_갱신(움직일_칸_수, 0, -1, 서풍)
        모래_갱신(움직일_칸_수, 1, 0, 남풍)


    elif 움직일_칸_수 % 2 == 0:
        모래_갱신(움직일_칸_수, 0, 1, 동풍)
        모래_갱신(움직일_칸_수, -1, 0, 북풍)

print(답)
